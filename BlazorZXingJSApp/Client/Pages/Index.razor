@page "/"
@using BlazorBarcodeScanner.ZXing.JS
@inject IJSRuntime JSRuntime

<h1>BlazorBarcodeScanner Demo</h1>

<h2>Stream resolution:</h2>
(stop and start the stream to pickup new resolution)
<table>
    <tr>
        <th>Width:</th><td><input style="width: 7em" @bind="StreamWidth" /></td>
    </tr>
    <tr>
        <th>Height:</th><td><input style="width: 7em" @bind="StreamHeight" /></td>
    </tr>
</table>
<button @onclick="() => _reader.UpdateResolution()">Update stream</button>

<BlazorBarcodeScanner.ZXing.JS.BarcodeReader @ref="_reader"
                                             StartCameraAutomatically="true"
                                             Title="Scanzor"
                                             VideoWidth="600"
                                             VideoHeigth="480"
                                             StreamWidth="@StreamWidth"
                                             StreamHeight="@StreamHeight"
                                             OnBarcodeReceived="LocalReceivedBarcodeText" />

<table>
    <tr>
        <th>Custom Result:</th>
        <td>@LocalBarcodeText</td>
    </tr>
    <tr>
        <th>Custom Controls:</th>
        <td>
            <button @onclick="() => _reader.StartDecoding()">Start</button>
            <button @onclick="() => _reader.StopDecoding()">Stop</button>
            <button @onclick="() => _reader.ToggleTorch()">Toggle Torch</button>
            <button @onclick="() => _reader.TorchOn()">Toggle On</button>
            <button @onclick="() => _reader.TorchOff()">Toggle Off</button>
        </td>
    </tr>
    <tr>
        <th>Custom Source Switch</th>
        <td>
            <button @onclick="OnVideoSourceNext">Next source</button>
        </td>
    </tr>
</table>

@code{
    private BarcodeReader _reader;
    private int StreamWidth = 640;
    private int StreamHeight = 480;

    private string LocalBarcodeText;
    private int _currentVideoSourceIdx = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (!string.IsNullOrWhiteSpace(_reader.SelectedVideoInputId))
            {
                _currentVideoSourceIdx = SourceIndexFromId();
            }
        }
    }

    private int SourceIndexFromId()
    {
        int result = 0;
        var inputs = _reader.VideoInputDevices.ToList();
        for (result = 0; result < inputs.Count; result++)
        {
            if (inputs[result].DeviceId.Equals(_reader.SelectedVideoInputId))
            {
                break;
            }
        }
        return result;
    }

    private void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        this.LocalBarcodeText = args.BarcodeText;
        StateHasChanged();
    }

    private void OnVideoSourceNext(MouseEventArgs args)
    {
        var inputs = _reader.VideoInputDevices.ToList();

        if (inputs.Count == 0) {
            return;
        }

        _currentVideoSourceIdx++;
        if (_currentVideoSourceIdx >= inputs.Count)
        {
            _currentVideoSourceIdx = 0;
        }

        _reader.SelectVideoInput(inputs[_currentVideoSourceIdx]);
    }
}
